// Copyright CERN and copyright holders of ALICE O2. This software is
// distributed under the terms of the GNU General Public License v3 (GPL
// Version 3), copied verbatim in the file "COPYING".
//
// See http://alice-o2.web.cern.ch/license for full licensing information.
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
//   obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
//   execute, and transmit the Software, and to prepare derivative works of the
//   Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
//   must be included in all copies of the Software, in whole or in part, and
//   all derivative works of the Software, unless such copies or derivative
//   works are solely in the form of machine-executable object code generated by
//   a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//   DEALINGS IN THE SOFTWARE.

/// \file DataSamplingConditionHashCombine.cxx
/// \brief Implementation of DataSamplingConditionHashCombine
///
/// \author Piotr Konopka, piotr.jan.konopka@cern.ch

//#include <boost/functional/hash.hpp>

#include "Framework/DataSamplingCondition.h"
#include "Framework/DataSamplingConditionFactory.h"
#include "Framework/DataProcessingHeader.h"

namespace o2
{
namespace framework
{

using namespace o2::header;

// deterministic in one program run

/// \brief A DataSamplingCondition which
class DataSamplingConditionHashCombine : public DataSamplingCondition
{
 public:
  /// \brief Constructor.
  DataSamplingConditionHashCombine() : DataSamplingCondition(), mSeed(static_cast<uint64_t>(time(nullptr))) {};
  /// \brief Default destructor
  ~DataSamplingConditionHashCombine() = default;

  uint64_t hashCombine(uint64_t h, uint64_t k)
  {
    // implementation copied from boost/functional/hash.hpp because it is required that it does not change with future
    // boost versions (to guarantee determinism in many runs and machines)

    const uint64_t m = UINT64_C(0xc6a4a7935bd1e995);
    const int r = 47;

    k *= m;
    k ^= k >> r;
    k *= m;

    h ^= k;
    h *= m;

    // Completely arbitrary number, to prevent 0's
    // from hashing to 0.
    h += 0xe6546b64;

    return h;
  }


  /// \brief
  void configure(const boost::property_tree::ptree& config) override
  {
    mFraction = config.get<double>("fraction");
    mSeed = hashCombine(0, config.get<uint64_t>("seed"));
  };
  /// \brief
  bool decide(const o2::framework::DataRef& dataRef) override
  {
    const auto* dpHeader = get<DataProcessingHeader*>(dataRef.header);
    assert(dpHeader);

    return hashCombine(mSeed, dpHeader->startTime) < mFraction * std::numeric_limits<uint64_t>::max();
  }

  uint64_t rnd(uint64_t i) override {
    return hashCombine(mSeed, i);
  }

 private:
  uint64_t mSeed;
  double mFraction;
};

std::unique_ptr<DataSamplingCondition> DataSamplingConditionFactory::createDataSamplingConditionHashCombine()
{
  return std::make_unique<DataSamplingConditionHashCombine>();
}

} // namespace framework
} // namespace o2